using System;
using System.IO;
using System.Security.Cryptography;

namespace Mono.CompilerServices.SymbolWriter
{
	// Token: 0x0200030C RID: 780
	public class SourceFileEntry
	{
		// Token: 0x1700053A RID: 1338
		// (get) Token: 0x06001380 RID: 4992 RVA: 0x0003EA8B File Offset: 0x0003CC8B
		public static int Size
		{
			get
			{
				return 8;
			}
		}

		// Token: 0x06001381 RID: 4993 RVA: 0x0003EE35 File Offset: 0x0003D035
		public SourceFileEntry(MonoSymbolFile file, string file_name)
		{
			this.file = file;
			this.file_name = file_name;
			this.Index = file.AddSource(this);
			this.creating = true;
		}

		// Token: 0x06001382 RID: 4994 RVA: 0x0003EE5F File Offset: 0x0003D05F
		public SourceFileEntry(MonoSymbolFile file, string sourceFile, byte[] guid, byte[] checksum)
			: this(file, sourceFile, sourceFile, guid, checksum)
		{
		}

		// Token: 0x06001383 RID: 4995 RVA: 0x0003EE6D File Offset: 0x0003D06D
		public SourceFileEntry(MonoSymbolFile file, string fileName, string sourceFile, byte[] guid, byte[] checksum)
			: this(file, fileName)
		{
			this.guid = guid;
			this.hash = checksum;
			this.sourceFile = sourceFile;
		}

		// Token: 0x1700053B RID: 1339
		// (get) Token: 0x06001384 RID: 4996 RVA: 0x0003EE8E File Offset: 0x0003D08E
		public byte[] Checksum
		{
			get
			{
				return this.hash;
			}
		}

		// Token: 0x06001385 RID: 4997 RVA: 0x0003EE98 File Offset: 0x0003D098
		internal void WriteData(MyBinaryWriter bw)
		{
			this.DataOffset = (int)bw.BaseStream.Position;
			bw.Write(this.file_name);
			if (this.guid == null)
			{
				this.guid = new byte[16];
			}
			if (this.hash == null)
			{
				try
				{
					using (FileStream fileStream = new FileStream(this.sourceFile, FileMode.Open, FileAccess.Read))
					{
						MD5 md = MD5.Create();
						this.hash = md.ComputeHash(fileStream);
					}
				}
				catch
				{
					this.hash = new byte[16];
				}
			}
			bw.Write(this.guid);
			bw.Write(this.hash);
			bw.Write(this.auto_generated ? 1 : 0);
		}

		// Token: 0x06001386 RID: 4998 RVA: 0x0003EF68 File Offset: 0x0003D168
		internal void Write(BinaryWriter bw)
		{
			bw.Write(this.Index);
			bw.Write(this.DataOffset);
		}

		// Token: 0x06001387 RID: 4999 RVA: 0x0003EF84 File Offset: 0x0003D184
		internal SourceFileEntry(MonoSymbolFile file, MyBinaryReader reader)
		{
			this.file = file;
			this.Index = reader.ReadInt32();
			this.DataOffset = reader.ReadInt32();
			int num = (int)reader.BaseStream.Position;
			reader.BaseStream.Position = (long)this.DataOffset;
			this.sourceFile = (this.file_name = reader.ReadString());
			this.guid = reader.ReadBytes(16);
			this.hash = reader.ReadBytes(16);
			this.auto_generated = reader.ReadByte() == 1;
			reader.BaseStream.Position = (long)num;
		}

		// Token: 0x1700053C RID: 1340
		// (get) Token: 0x06001388 RID: 5000 RVA: 0x0003F022 File Offset: 0x0003D222
		// (set) Token: 0x06001389 RID: 5001 RVA: 0x0003F02A File Offset: 0x0003D22A
		public string FileName
		{
			get
			{
				return this.file_name;
			}
			set
			{
				this.file_name = value;
			}
		}

		// Token: 0x1700053D RID: 1341
		// (get) Token: 0x0600138A RID: 5002 RVA: 0x0003F033 File Offset: 0x0003D233
		public bool AutoGenerated
		{
			get
			{
				return this.auto_generated;
			}
		}

		// Token: 0x0600138B RID: 5003 RVA: 0x0003F03B File Offset: 0x0003D23B
		public void SetAutoGenerated()
		{
			if (!this.creating)
			{
				throw new InvalidOperationException();
			}
			this.auto_generated = true;
			this.file.OffsetTable.FileFlags |= OffsetTable.Flags.IsAspxSource;
		}

		// Token: 0x0600138C RID: 5004 RVA: 0x0003F06C File Offset: 0x0003D26C
		public bool CheckChecksum()
		{
			bool flag;
			try
			{
				using (FileStream fileStream = new FileStream(this.sourceFile, FileMode.Open))
				{
					byte[] array = MD5.Create().ComputeHash(fileStream);
					for (int i = 0; i < 16; i++)
					{
						if (array[i] != this.hash[i])
						{
							return false;
						}
					}
					flag = true;
				}
			}
			catch
			{
				flag = false;
			}
			return flag;
		}

		// Token: 0x0600138D RID: 5005 RVA: 0x0003F0E0 File Offset: 0x0003D2E0
		public override string ToString()
		{
			return string.Format("SourceFileEntry ({0}:{1})", this.Index, this.DataOffset);
		}

		// Token: 0x04000A08 RID: 2568
		public readonly int Index;

		// Token: 0x04000A09 RID: 2569
		private int DataOffset;

		// Token: 0x04000A0A RID: 2570
		private MonoSymbolFile file;

		// Token: 0x04000A0B RID: 2571
		private string file_name;

		// Token: 0x04000A0C RID: 2572
		private byte[] guid;

		// Token: 0x04000A0D RID: 2573
		private byte[] hash;

		// Token: 0x04000A0E RID: 2574
		private bool creating;

		// Token: 0x04000A0F RID: 2575
		private bool auto_generated;

		// Token: 0x04000A10 RID: 2576
		private readonly string sourceFile;
	}
}
